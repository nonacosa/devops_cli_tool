'use strict';
//where the workingDirPath is optional, defaulting to the current directory.
const git = require('simple-git')();
const ZingInquirer = require('./inquirer')
const inquirer = require('inquirer')

let currentBugId = '';

function ZingGit () {}

// rebase ÊØîËæÉÈÄÇÂêàÂÖ¨Âè∏Âú∫ÊôØ http://gitbook.liuhui998.com/4_2.html

 

 


// update repo and when there are changes, restart the app
ZingGit.prototype.pull = function(callback) {
  git.pull((err, update) => {
        if(update && update.summary.changes) {
          //  require('child_process').exec('npm restart');
          console.log('ÂèëÁé∞Êñ∞ÁöÑÊõ¥Êñ∞!')
          console.log(update)
        }
        if(callback != undefined) {
          callback();
        }
     });
}

ZingGit.prototype.gitInfo = function() {
  git.listRemote(['--get-url'], (err, data) => {
      if (!err) {
          console.info('ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºö>>> %s   üëå' , __dirname );
          console.info('ÂΩìÂâçËøúÁ®ãÁ©∫Èó¥Ôºö>>> %s   ' , data);
          // git.addRemote('origin', data, (err,addInfo) => {
          //   console.info('addInfo >>> ' + addInfo);
          // })
      }
  });
}

     
//git checkout -b Êú¨Âú∞ÂàÜÊîØÂêç origin/ËøúÁ®ãÂàÜÊîØÂêç
ZingGit.prototype.checkoutBranch = function(branch,origin,bugId) {
  git.fetch()
  if(origin == undefined || origin === null) {
    origin = 'origin/master'
  }
  git.checkoutBranch(branch,origin, function (err, result) {
    if(!err) {
      currentBugId = bugId;
      console.info('Ëá™Âä®‰∏∫ÊÇ®‰ªé %s ÂàõÂª∫Âπ∂ÂàáÊç¢‰∏∫ÂàÜÊîØÔºö%s üëå',origin,branch)
      // new ZingGit().gitInfo();
      console.warn('ËØ∑Â∞ΩÈáèÁ°Æ‰øù‰∏Ä‰∏™ÂàÜÊîØÂè™Ëß£ÂÜ≥‰∏Ä‰∏™ÈóÆÈ¢ò ! ')
    }
  });
}    

//git status
ZingGit.prototype.checkAndCommit = function(msg) {
  let checkArr = [];
  let fileArr = [];
 
  function eachCheck(checkArr,changeArr,type) {
    if(changeArr.length > 0) {
      checkArr.push(new inquirer.Separator(` = ${type} = `))
      for(var i = 0; i< changeArr.length; i++) {
        checkArr.push({name : changeArr[i], checked : true})
      }
    }
  }

  git.status(function (err, result) {
    if(!err) {

      for(var i = 0; i< result.files.length; i++) {
        fileArr.push(__dirname + '/' + result.files[i].path)
      }
 
      eachCheck(checkArr,result.not_added,"ÂΩìÂâçÊñ∞Âª∫ÁöÑÊñá‰ª∂");
      eachCheck(checkArr,result.conflicted,"ÂΩìÂâçÂÜ≤Á™ÅÁöÑÊñá‰ª∂");
      eachCheck(checkArr,result.created,"ÂΩìÂâç created ÁöÑÊñá‰ª∂");
      eachCheck(checkArr,result.deleted,"ÂΩìÂâçÂà†Èô§ÁöÑÊñá‰ª∂");
      eachCheck(checkArr,result.modified,"ÂΩìÂâç‰øÆÊîπÁöÑÊñá‰ª∂");
      eachCheck(checkArr,result.renamed,"ÂΩìÂâçÊîπÂêçÁöÑÊñá‰ª∂");
      ZingInquirer.checkbox(checkArr,files => {
        let toCommitFilesPathArray = [];
        for(var i = 0; i< files.length; i++) {
          toCommitFilesPathArray.push(__dirname + '/' + files[i]);
        }
        new ZingGit().add(toCommitFilesPathArray);
        new ZingGit().commit(toCommitFilesPathArray,msg);
      });

    }
  });
}

//git add
ZingGit.prototype.add = function(fileArr) {
  git.add(fileArr,function (err, result) {

    if(!err) {
      console.log(result)
    }
  });
}
//git commit
ZingGit.prototype.commit = function(fileArr,msg) {
  new ZingGit().branchInfo(Id => {
    git.commit(msg || `fix-bug-${Id}  http://39.104.96.233:60888/zentao/bug-view-${Id}.html `, fileArr, null,function (err, result) {
    if(!err) {
      console.info("Êèê‰∫§ÊàêÂäüÔºåÊîπÂä®Â¶Ç‰∏ã Ôºö \n\n")
      console.log(result)
    }else {
      console.log(err + '\n')
    }
  });
  })
  
}

//git branchInfo
ZingGit.prototype.branchInfo = function(callback) {
  git.branch(null,(err,data) => {
    if(!err) {
      let currentBranch = data.current;
      let bugOrFeatureId = '';
      if(currentBranch.indexOf('fix') > -1) {
        bugOrFeatureId = currentBranch.substring(currentBranch.lastIndexOf('-')+1);
      } else {
        bugOrFeatureId = currentBranch
      }
      callback(bugOrFeatureId,currentBranch);
    }
  })
}

//git push
ZingGit.prototype.push = function(callback) {
  console.log('----')
  ZingGit.prototype.branchInfo((id,name) => {
    git.push('origin',name,(err,res) => {
      console.info('push ÂàÜÊîØ %s Âà∞ËøúÁ®ãÊàêÂäü',name);
    });
  })
  
}

//git merge
ZingGit.prototype.merge = function(callback) {
   git.mergeFromTo('test','dev',(err,res) => {
      if(!err) {
        if(callback != undefined) {
          callback();
        }
      }
   })
  
}


//git checkout and pull 
ZingGit.prototype.checkoutDev = function(callback) {
  git.fetch()
  git.checkout('dev',(err,res) => {
    if(!err) {
      console.info('checkout ÂàÜÊîØ dev Âà∞ËøúÁ®ãÊàêÂäü ÔºÅ\n');
      console.info('ÂáÜÂ§á‰ªé origin Êõ¥Êñ∞ dev');
      ZingGit.prototype.pull(cb => {
        ZingGit.prototype.merge(() => {
          console.info('merge ÂÆåÊàê ÔºÅ')
          ZingGit.prototype.push();
        })
      })
      
    }
  });
 
  
}

 


new ZingGit().checkoutDev();



module.exports = new ZingGit();
     


 